resources:
- repo: self
  clean: true

# The variables `_DotNetArtifactsCategory` and `_DotNetValidationArtifactsCategory` are required for proper publishing of build artifacts. See https://github.com/dotnet/roslyn/pull/38259
variables:
  - name: _DotNetArtifactsCategory
    value: .NETCore
  - name: _DotNetValidationArtifactsCategory
    value: .NETCoreValidation

# Branches that trigger a build on commit
trigger:
- main
- release/*
- internal/release/*

stages:
- stage: build
  displayName: Build and Test
  pool:
    name: NetCore1ESPool-Svc-Internal
    demands: ImageOverride -equals windows.vs2022preview.amd64

  jobs:
  - job: OfficialBuild
    displayName: Official Build

    steps:
    - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@3
      displayName: Install Signing Plugin
      inputs:
        signType: $(SignType)
        esrpSigning: true
        feedSource: https://dnceng.pkgs.visualstudio.com/_packaging/MicroBuildToolset/nuget/v3/index.json
      condition: and(succeeded(), ne(variables['SignType'], ''))

    - script: eng\common\CIBuild.cmd
                -configuration $(BuildConfiguration)
                /p:OfficialBuildId=$(Build.BuildNumber)
                /p:VisualStudioDropName=$(VisualStudioDropName)
                /p:DotNetSignType=$(SignType)
                /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
                /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
                /p:DotNetFinalVersionKind=$(_additionalBuildArgs)
                /p:DotNetArtifactsCategory=$(_DotNetArtifactsCategory)
                /p:DotnetPublishUsingPipelines=true
      displayName: Build

    - template: eng\common\templates\steps\generate-sbom.yml

    - task: PublishTestResults@2
      displayName: Publish XUnit Test Results
      inputs:
        testRunner: XUnit
        testResultsFiles: '$(Build.SourcesDirectory)\artifacts\TestResults\$(BuildConfiguration)\*.trx'
        mergeTestResults: true
        testRunTitle: 'Unit Tests'
      condition: always()

    - task: PublishBuildArtifacts@1
      displayName: Publish Logs
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)\artifacts\log\$(BuildConfiguration)'
        ArtifactName: 'Logs'
        publishLocation: Container
      continueOnError: true
      condition: not(succeeded())

    - task: PublishBuildArtifacts@1
      displayName: Publish Logs
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)\artifacts\TestResults\$(BuildConfiguration)'
        ArtifactName: 'TestResults'
        publishLocation: Container
      condition: not(succeeded())

    # Publish our NuPkgs as an artifact. The name of this artifact must be PackageArtifacts as the
    # arcade templates depend on the name.'
    - task: PublishBuildArtifacts@1
      displayName: Publish Packages
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)\artifacts\packages\$(BuildConfiguration)'
        ArtifactName: 'PackageArtifacts'
      condition: succeeded()

    # Publish Asset Manifests for Build Asset Registry job
    - task: PublishBuildArtifacts@1
      displayName: Publish Asset Manifests
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(BuildConfiguration)/AssetManifest'
        ArtifactName: AssetManifests
      condition: succeeded()

    - task: ms-vseng.MicroBuildTasks.521a94ea-9e68-468a-8167-6dcf361ea776.MicroBuildCleanup@1
      displayName: Cleanup
      condition: always()

    - task: PublishBuildArtifacts@1
      displayName: Publish MicroBuild Artifacts
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)\MicroBuild\Output'
        ArtifactName: MicroBuildOutputs
        publishLocation: Container
      condition: succeededOrFailed()

  - job: codeql
    displayName: CodeQL
    variables:
      # CG is handled in the primary CI pipeline
    - name: skipComponentGovernanceDetection
      value: true
      # Force CodeQL enabled so it may be run on any branch
    - name: Codeql.Enabled
      value: true
      # Do not let CodeQL 3000 Extension gate scan frequency
    - name: Codeql.Cadence
      value: 0
    - name: Codeql.TSAEnabled
      value: true
    steps:
      - task: CodeQL3000Init@0
        displayName: CodeQL Initialize
      - script: eng\common\cibuild.cmd
          -configuration Release
          -prepareMachine
          /p:Test=false
        displayName: Windows Build
      - task: CodeQL3000Finalize@0
        displayName: CodeQL Finalize

  - template: /eng/common/templates/jobs/source-build.yml

  # Publish to Build Asset Registry
  - template: /eng/common/templates/job/publish-build-assets.yml
    parameters:
      publishUsingPipelines: true
      dependsOn:
        - OfficialBuild
        - Source_Build_Managed
      pool:
        vmImage: windows-2019

- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
  - template: eng\common\templates\post-build\post-build.yml
    parameters:
      publishingInfraVersion: 3
      # Symbol validation is not entirely reliable as of yet, so should be turned off until
      # https://github.com/dotnet/arcade/issues/2871 is resolved.
      enableSymbolValidation: false
      enableSourceLinkValidation: false
